version: 2.1
orbs:
  coveralls: coveralls/coveralls@2.2.1
jobs:
  build_server:
    docker:
      - image: node:20-bullseye
    working_directory: ~/repo/server
    steps:
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            - server-modules-{{ checksum "package-lock.json" }}

      # check npm dependencies for security risks - run 'npm audit' to fix
      - run:
          name: Security Check
          command: npx audit-ci --high --report-type full

      # install dependecies
      - run: npm ci

      - save_cache:
          key: server-modules-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

      # ensure code formatting standards are adhered to - run 'npm run style:fix' to fix
      - run:
          name: Check for Code Style and Linting Issues
          command: |
            npm run style
            npm run lint

      # run tests and store test results
      - run:
          name: Run Tests and Check Code Coverage
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results/
      - store_test_results:
          path: ./test_results
      - store_artifacts:
          path: ./coverage

      - coveralls/upload

      - run:
          name: Move compiled app to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/server
            mv dist /tmp/workspace/server
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - server
  build_webapp:
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo/web-app
    steps:
      - checkout:
          path: ~/repo
      - run: cd ..; npm run modules:init
      - restore_cache:
          keys:
            - web-modules-{{ checksum "package-lock.json" }}

      - run: npm ci
      - run: npx ngcc --properties es2015

      # force update the webdriver, so it runs with latest version of Chrome
      - run: cd ./node_modules/protractor && npm i webdriver-manager@latest

      - save_cache:
          key: web-modules-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm

      - run: npm run style
      - run: npm run lint
      - run: npm run build -- --configuration=lemon-mart-server
      - run: npm test -- --watch=false --code-coverage
      - run: npm run e2e

      - store_test_results:
          path: ./test_results
      - store_artifacts:
          path: ./coverage

      - run:
          name: Tar & Gzip compiled app
          command: tar zcf dist.tar.gz dist/lemon-mart
      - store_artifacts:
          path: dist.tar.gz

      - run:
          name: Move compiled app to workspace
          command: |
            set -exu
            mkdir -p /tmp/workspace/dist
            mv dist/lemon-mart /tmp/workspace/dist/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - dist/lemon-mart
  test_compose:
    docker:
      - image: cimg/node:lts-browsers
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - checkout:
          path: ~/repo
      - run: npm run modules:init
      - run:
          name: Copy built server to server/dist folder
          command: cp -avR /tmp/workspace/server/dist/ ./server
      - run:
          name: Copy built web-app to web-app/dist folder
          command: cp -avR /tmp/workspace/dist/ ./web-app
      - run:
          name: Restore .env files
          command: |
            set +H
            echo -e $PROJECT_DOT_ENV > .env
            echo -e $SERVER_DOT_ENV > server/.env
      - run:
          name: Compose up
          command: |
            set -x
            docker-compose up -d
      - run:
          name: Verify web app
          command: |
            set -x
            docker run --network container:web jwilder/dockerize -wait http://localhost:80
            docker run --network container:web appropriate/curl http://localhost:80
      - run:
          name: Verify db login with api
          command: |
            set -x
            docker run --network container:lemon-mart-server jwilder/dockerize -wait http://localhost:3000
            docker run --network container:lemon-mart-server appropriate/curl \
              -H "accept: application/json" -H "Content-Type: application/json" \
              -d "$LOGIN_JSON" http://localhost:3000/v1/auth/login

workflows:
  build-and-test-compose:
    jobs:
      - build_server
      #- build_webapp
      - test_compose:
          requires:
            - build_server
            # - build_webapp
